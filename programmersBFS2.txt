class Solution {
    
    String[] wordset;
	boolean[] isVisited;
	String strTarget;
	int totCnt;
    
    public int solution(String begin, String target, String[] words) {
       int ans = 0;
		isVisited = new boolean[words.length];
		strTarget = target;
		totCnt = Integer.MAX_VALUE;
		boolean flag = false;
		
		for(String s : words) {
			
			if(target.equals(s)) {
				flag = true;
			}
			
		}
		
		if(!flag) {
			return 0;
		}else {
			dfs(0, begin, words);
		}
		
			
		

		return ans = totCnt;
    }
    
    public void dfs(int i, String begin, String[] words) {
		
		if(begin.equals(strTarget)) {
			if(totCnt > i) {
				totCnt = i;
			}
			
			return;
		}else {
			
			
			for(int idx = 0; idx<words.length; idx++ ) {
				
				if(!isVisited[idx] && isChanged(begin, words[idx])) {
					
					isVisited[idx] = true;
					dfs(i + 1, words[idx] , words);
					isVisited[idx] = false;
				}
				
			}
			
		}
		
		
	}
    
    public boolean isChanged(String begin, String comStr) {

		int cnt = 0;

		for (int i = 0; i < begin.length(); i++) {

			if (begin.charAt(i) == comStr.charAt(i)) {
				cnt++;

			}
		}

		if (cnt == begin.length() - 1) {
			return true;
		} else {
			return false;
		}

	}
}