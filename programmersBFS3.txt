class Solution {
    
    int[][] Linked;
	boolean[] isVisited;
	int ans;
    
    
   public int solution(int n, int[][] computers) {

		init(computers);
       
		for (int i = 0; i < computers.length; i++) {
			
			if(!isVisited[i]) {
				
				ans++;
				dfs(computers,i);
			}
		}

		return ans;
	}
    
    public void dfs(int[][] computers, int depth) {

	

		isVisited[depth] = true;

		for (int i = 0; i < computers.length; i++) {

			if (!isVisited[i] && Linked[depth][i] == 1) {

				
				dfs(computers, i);

			}

		}

	}
    
    public void init(int[][] computers) {

		Linked = new int[computers.length][computers[0].length];
		isVisited = new boolean[computers[0].length];

		for (int i = 0; i < computers.length; i++) {

			for (int j = 0; j < computers[i].length; j++) {

				if (i == j) {
					continue;
				}
				Linked[i][j] = computers[i][j];
			}
		}
	}
    
    
}