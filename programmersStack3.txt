package algo;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class func {

	int prog;
	int spd;

	func(int prog, int spd) {
		this.prog = prog;
		this.spd = spd;
	}

}

public class ProgrammersStack3 {

	static Queue<func> q;
	static List<Integer> ans;

	public static void main(String[] args) {

		
		int[] pro = {93, 30, 55};
		int[] speeds = {1, 30, 5};
		
		q = new LinkedList<>();
		ans = new ArrayList<>();
		
		int[] tmpAns = solution(pro, speeds);
		for(int i = 0; i <tmpAns.length; i++) {
			System.out.println(tmpAns[i]);
		}
		
		
	}

	static int[] solution(int[] progresses, int[] speeds) {

		int[] answer = {};
		int cnt = 0;

	
		
		for (int i = 0; i < speeds.length; i++) {
			q.offer(new func(progresses[i], speeds[i]));
		}

		while (!q.isEmpty()) {
			
			cnt = 0;

			for (func f : q) {

				if (f.prog < 100) {

					f.prog += f.spd;

				}
				
				//System.out.println(f.prog);

			}
			
	
	
			while(!q.isEmpty()) {
				
				
				if(q.peek().prog >= 100) {
				
					cnt++;
					q.poll();
					
				}else {
					break;
				}
				
			}
			if(cnt != 0)
			ans.add(cnt);

		}
		
		answer = new int[ans.size()];
		
		for(int i = 0; i<ans.size(); i++) {
			answer[i] = ans.get(i);
		}
		
		return answer;
	}
}