import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;

class Solution {

    Set<Integer> set = new TreeSet<>();
    
    public int solution(String numbers) {
        int ans = 0;

		int[] in = new int[numbers.length()];
		int[] out = new int[numbers.length()];
		boolean[] isVisited = new boolean[numbers.length()];

		for (int i = 0; i < numbers.length(); i++) {
			in[i] = Integer.parseInt(numbers.charAt(i) + "");
		}

		for (int i = 1; i <= in.length; i++) {
			perm(in, out, isVisited, 0, in.length, i);

			Arrays.fill(isVisited, false);
			Arrays.fill(out, 0);
		}
        
        ans=set.size();

		return ans;
    }
    
    public void perm(int[] in, int[] out, boolean[] visit, int depth, int n, int r) {

		if (depth == r) {
			sosu(out, r);
			
			return;
		}

		for (int i = 0; i < n; i++) {
			if (visit[i] != true) {
				visit[i] = true;
				out[depth] = in[i];
				perm(in, out, visit, depth + 1, n, r);
				out[depth] = 0; 
				visit[i] = false;

			}
		}

	}
    
    public void sosu(int[] arr, int r) {

		String str = "";
		boolean isChecked = false;
		
		for (int i = 0; i < r; i++) {
			str += (arr[i] + "");
		}

		System.out.println(str);
		
		int b = Integer.parseInt(str);
		if (b <= 1) {

			return ;
		}
		for (int j = 2; j <= Math.sqrt(b); j++) {
			if (b % j == 0) {
				return ;
			}
		}
		isChecked = true;
		
		if(isChecked) {
			
			set.add(b);
			
		}
		
		return;

	}
    
    
}